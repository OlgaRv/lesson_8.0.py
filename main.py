# Разработать простую игру, где игрок может использовать различные типы оружия для борьбы с монстрами.
# Программа должна быть спроектирована таким образом, чтобы легко можно было добавлять новые типы оружия,
# не изменяя существующий код бойцов или механизм боя.
#
# Исходные данные:
#
# Есть класс Fighter, представляющий бойца.
# Есть класс Monster, представляющий монстра.
# Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.

# Шаг 1: Создайте абстрактный класс для оружия
# Создайте абстрактный класс Weapon, который будет содержать абстрактный метод attack().

# Шаг 2: Реализуйте конкретные типы оружия
# Создайте несколько классов, унаследованных от Weapon, например, Sword и Bow.
# Каждый из этих классов реализует метод attack() своим уникальным способом.

# Шаг 3: Модифицируйте класс Fighter
# Добавьте в класс Fighter поле, которое будет хранить объект класса Weapon.
# Добавьте метод changeWeapon(), который позволяет изменить оружие бойца.

# Шаг 4: Реализация боя
# Реализуйте простой механизм для демонстрации боя между бойцом и монстром, исходя из выбранного оружия.

from abc import ABC, abstractmethod
class Weapon(ABC):
    @abstractmethod
    def attack(self):
        pass
class Sword(Weapon):
    def attack(self):
        print("Боец наносит удар мечом")
        print("Монстр побежден!")
class Bow(Weapon):
    def attack(self):
        print("Боец наносит удар из лука")
        print("Монстр побежден!")
class Fighter():
    def __init__(self, weapon):
        self.weapon = weapon
        print(f"Боец выбирает {self.weapon}")
    def changeWeapon(self, new_weapon):
        self.weapon = new_weapon
        print(f"Боец выбирает {self.weapon}")
class Monster():
    def __init__(self):
        pass

fighter = Fighter("меч")
sword = Sword()
sword.attack()
fighter.changeWeapon("лук")
bow = Bow()
bow.attack()